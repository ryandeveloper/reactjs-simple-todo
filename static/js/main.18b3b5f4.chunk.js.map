{"version":3,"sources":["TodoItem.js","Alert.js","App.js","index.js"],"names":["TodoItem","list","removeItem","editTodo","checkedItem","map","todoData","id","name","checked","key","className","onClick","type","onChange","Alert","message","removeAlert","useEffect","timeout","setTimeout","clearTimeout","App","useState","setName","keyname","localStorage","getItem","JSON","parse","getLocalStorage","setList","show","alert","setAlert","editing","setEditing","editID","setEditID","multipleTodo","setMultipleTodo","options","setOptions","textAreaData","useRef","inputRef","showAlert","setItem","stringify","current","focus","value","cols","rows","placeholder","ref","e","target","window","confirm","multipleTodos","split","todoItem","i","uuid","replace","concat","onSubmit","preventDefault","newTodoItem","length","style","marginTop","filter","item","findTodoData","find","todo","ReactDOM","render","document","getElementById"],"mappings":"wNAwBeA,EArBE,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC7C,OACG,oCACIH,EAAKI,KAAI,SAAAC,GAAa,IACZC,EAAsBD,EAAtBC,GAAIC,EAAkBF,EAAlBE,KAAMC,EAAYH,EAAZG,QAClB,OACG,6BAASC,IAAKH,EAAII,UAAU,gBACzB,uBAAGA,UAAS,+BAA0BF,GAAW,kBAAoBG,QAAS,kBAAMR,EAAYG,KAC7F,2BAAOM,KAAK,WAAWJ,QAASA,EAASK,SAAU,kBAAMV,EAAYG,MADxE,IACiFC,GAEjF,yBAAKG,UAAU,iBACZ,4BAAQE,KAAK,SAASF,UAAU,WAAWC,QAAS,kBAAMT,EAASI,KAAK,kBAAC,IAAD,MAAxE,SACA,4BAAQM,KAAK,SAASF,UAAU,aAAaC,QAAS,kBAAMV,EAAWK,EAAIC,KAAO,kBAAC,IAAD,MAAlF,kBCINO,EAjBD,SAAC,GAA0C,IAAxCF,EAAuC,EAAvCA,KAAMG,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,YAAahB,EAAW,EAAXA,KAU1C,OARAiB,qBAAU,WACP,IAAMC,EAAUC,YAAW,WACxBH,MACA,KAEH,OAAO,kBAAMI,aAAaF,MAC1B,CAAClB,IAGD,oCACG,uBAAGU,UAAS,sBAAiBE,IAASG,K,gBCqMhCM,EAnMH,WAAM,MAISC,mBAAS,IAJlB,mBAIRf,EAJQ,KAIFgB,EAJE,OAKSD,mBAfH,WAAmB,IAAlBE,EAAiB,uDAAP,GAChC,OAAQA,GACL,IAAK,WACF,IAAInB,EAAWoB,aAAaC,QAAQF,GACpC,OAAQnB,EAAWsB,KAAKC,MAAMvB,GAAY,GAC7C,QACG,MAAO,IASoBwB,CAAgB,aALlC,mBAKR7B,EALQ,KAKF8B,EALE,OAMWR,mBAAS,CAAES,MAAM,EAAOnB,KAAM,GAAIG,QAAS,KANtD,mBAMRiB,EANQ,KAMDC,EANC,OAOeX,oBAAS,GAPxB,mBAORY,EAPQ,KAOCC,EAPD,OAQab,mBAAS,MARtB,mBAQRc,EARQ,KAQAC,EARA,OASyBf,mBAAS,IATlC,mBASRgB,EATQ,KASMC,EATN,OAUejB,mBAAS,UAVxB,mBAURkB,EAVQ,KAUCC,EAVD,KAYTC,EAAeC,iBAAO,MACtBC,EAAWD,iBAAO,MAkClBE,EAAY,WAA4C,IAA3Cd,EAA0C,wDAA5BnB,EAA4B,uDAArB,GAAIG,EAAiB,uDAAP,GACnDkB,EAAS,CAAEF,KAAMA,EAAMnB,OAAMG,aAiDhCE,qBAAU,WACPQ,aAAaqB,QAAQ,WAAYnB,KAAKoB,UAAU/C,MAChD,CAACA,IAEJiB,qBAAU,WACHiB,GACDU,EAASI,QAAQC,WAwBvB,OACG,oCACG,6BAASvC,UAAU,kBACfsB,EAAMD,MAAQ,kBAAC,EAAD,iBAAWC,EAAX,CAAkBhB,YAAa6B,EAAW7C,KAAMA,KAE/D,yCAEA,yBAAKU,UAAU,gBACZ,4BACGJ,GAAG,YACHI,UAAU,UACVwC,MAAOV,EAAS3B,SAhDV,WAClB4B,EAAwB,WAAZD,EAAuB,WAAa,UAChDL,GAAW,GACXE,EAAU,MACVd,EAAQ,MA6CI,4BAAQ2B,MAAM,UAAd,eACA,4BAAQA,MAAM,YAAd,mBAIN,yBAAKxC,UAAU,YAEF,aAAZ8B,EACE,yBAAK9B,UAAU,gBACZ,8BACGA,UAAU,mBACVyC,KAAK,KACLC,KAAK,KACLC,YAAY,wBACZH,MAAOZ,EACPgB,IAAKZ,EACL7B,SAAU,SAAC0C,GAAD,OAAOhB,EAAgBgB,EAAEC,OAAON,UAE7C,4BAAQtC,KAAK,SAASF,UAAU,aAAaC,QAlD/B,SAAC4C,GAC3B,GAAKb,EAAaM,QAAQE,OAEnB,GAAIO,OAAOC,QAAQ,oDAAqD,CAC5E,IAAMC,EAAgBjB,EAAaM,QAAQE,MAAMU,MAAM,MAAMxD,KAAI,SAACyD,EAAUC,GAMzE,MALqB,CAClBxD,GAAIyD,MAAOC,QAAQ,KAAM,IACzBzD,KAAMsD,EACNrD,SAAS,MAKfsB,EAAQ,YAAI9B,GAAMiE,OAAON,IACzBd,GAAU,EAAM,UAAW,sBAC3BN,EAAgB,IAChBhB,EAAQ,UAdRsB,GAAU,EAAM,SAAU,wBAgDjB,iBAGA,0BAAMnC,UAAU,eAAewD,SAjJzB,SAACX,GAEnB,GADAA,EAAEY,iBACG5D,EAGE,GAAIA,GAAQ2B,EAGhBJ,EAAQ9B,EAAKI,KAAI,SAACyD,GACf,OAAIA,EAASvD,KAAO8B,EACV,2BAAKyB,GAAZ,IAAsBtD,KAAMA,IAExBsD,MAEV1B,GAAW,GACXE,EAAU,MACVd,EAAQ,IACRsB,GAAU,EAAM,UAAW,iCACvB,CAEJ,IAAMuB,EAAc,CACjB9D,GAAIyD,MAAOC,QAAQ,KAAM,IACzBzD,KAAMA,EACNC,SAAS,GAGZsB,EAAQ,GAAD,mBAAK9B,GAAL,CAAWoE,KAClBvB,GAAU,EAAM,UAAW,sBAC3BtB,EAAQ,SAxBRsB,GAAU,EAAM,SAAU,wBA8Id,yBAAKnC,UAAU,gBACZ,2BAAOE,KAAK,OAAOF,UAAU,UAAU4C,IAAKV,EAAUS,YAAY,cAAcH,MAAO3C,EAAMM,SAAU,SAAC0C,GAAD,OAAOhC,EAAQgC,EAAEC,OAAON,UAC/H,4BAAQtC,KAAK,SAASF,UAAU,cAAcwB,EAAU,eAAiB,UAMvFlC,EAAKqE,OAAS,GACZ,6BAAS3D,UAAU,iBAAiB4D,MAAO,CAAEC,UAAW,SACrD,uCAEA,yBAAK7D,UAAU,YAEf,yBAAKA,UAAU,qBACZ,yBAAKA,UAAU,gBACZ,kBAAC,EAAD,CAAUV,KAAMA,EAAMC,WAnHrB,SAACK,EAAIC,GACrBuB,EAAQ9B,EAAKwE,QAAO,SAAAC,GAAI,OAAIA,EAAKnE,KAAOA,MACxCuC,GAAU,EAAM,SAAU,0BAA4BtC,EAAO,MAiHAL,SA9H/C,SAACI,GACf,IAAMoE,EAAe1E,EAAK2E,MAAK,SAACd,GAAD,OAAcA,EAASvD,KAAOA,KAEzDoE,IACDjC,EAAW,UACXN,GAAW,GACXE,EAAU/B,GACViB,EAAQmD,EAAanE,QAuHyDJ,YAhGhE,SAACG,GAClBwB,EAAQ9B,EAAKI,KAAI,SAACyD,GACf,OAAIA,EAASvD,KAAOA,EACV,2BAAKuD,GAAZ,IAAsBrD,SAAUqD,EAASrD,UAErCqD,UA8FE,yBAAKnD,UAAU,YAEf,yBAAKA,UAAU,gBACZ,4BAAQA,UAAU,YAAYC,QA7GrB,WACpB8C,OAAOC,QAAQ,uDAChB5B,EAAQ9B,EAAKwE,QAAO,SAAAI,GAAI,OAAqB,IAAjBA,EAAKpE,YACjCqC,GAAU,EAAM,SAAU,gDA0Gd,oBACA,4BAAQnC,UAAU,YAAYC,QArHzB,WAChB8C,OAAOC,QAAQ,8CAChB5B,EAAQ,IACRe,GAAU,EAAM,SAAU,sCAkHd,mBCnMrBgC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.18b3b5f4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { FaEdit, FaTrash } from 'react-icons/fa'\r\n\r\nconst TodoItem = ({ list, removeItem, editTodo, checkedItem }) => {\r\n   return (\r\n      <>\r\n         {list.map(todoData => {\r\n            const { id, name, checked } = todoData;\r\n            return (\r\n               <article key={id} className=\"grocery-item\">\r\n                  <p className={`title pointer-cursor ${checked && 'completed-item'}`} onClick={() => checkedItem(id)}>\r\n                     <input type=\"checkbox\" checked={checked} onChange={() => checkedItem(id)} /> {name}\r\n                  </p>\r\n                  <div className=\"btn-container\">\r\n                     <button type=\"button\" className=\"edit-btn\" onClick={() => editTodo(id)}><FaEdit /> Edit</button>\r\n                     <button type=\"button\" className=\"delete-btn\" onClick={() => removeItem(id, name)}><FaTrash /> Delete</button>\r\n                  </div>\r\n               </article>\r\n            )\r\n         })}\r\n      </>\r\n   )\r\n}\r\n\r\nexport default TodoItem;","import React, { useEffect } from 'react'\r\n\r\nconst Alert = ({ type, message, removeAlert, list }) => {\r\n\r\n   useEffect(() => {\r\n      const timeout = setTimeout(() => {\r\n         removeAlert()\r\n      }, 2000)\r\n\r\n      return () => clearTimeout(timeout)\r\n   }, [list])\r\n\r\n   return (\r\n      <>\r\n         <p className={`alert alert-${type}`}>{message}</p>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport TodoItem from './TodoItem';\r\nimport Alert from './Alert'\r\nimport './index.css';\r\nimport uuid from 'uuid'\r\n\r\nconst getLocalStorage = (keyname = '') => {\r\n   switch (keyname) {\r\n      case 'todolist':\r\n         let todoData = localStorage.getItem(keyname)\r\n         return (todoData ? JSON.parse(todoData) : [])\r\n      default:\r\n         return [];\r\n   }\r\n}\r\n\r\nconst App = () => {\r\n\r\n   // JSON TODO OBJECT { id:123, name='', checked: false/true }\r\n\r\n   const [name, setName] = useState('');\r\n   const [list, setList] = useState(getLocalStorage('todolist'));\r\n   const [alert, setAlert] = useState({ show: false, type: '', message: '' })\r\n   const [editing, setEditing] = useState(false)\r\n   const [editID, setEditID] = useState(null)\r\n   const [multipleTodo, setMultipleTodo] = useState('')\r\n   const [options, setOptions] = useState('single')\r\n\r\n   const textAreaData = useRef(null)\r\n   const inputRef = useRef(null)\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      if (!name) {\r\n         // if empty show alert\r\n         showAlert(true, 'danger', 'Please Enter Value')\r\n      } else if (name && editing) {\r\n         // if editing\r\n\r\n         setList(list.map((todoItem) => {\r\n            if (todoItem.id === editID) {\r\n               return { ...todoItem, name: name }\r\n            }\r\n            return todoItem;\r\n         }))\r\n         setEditing(false)\r\n         setEditID(null)\r\n         setName('')\r\n         showAlert(true, 'success', 'Successfully save changes')\r\n      } else {\r\n         // then submit\r\n         const newTodoItem = {\r\n            id: uuid().replace(/-/g, ''),\r\n            name: name,\r\n            checked: false\r\n         }\r\n\r\n         setList([...list, newTodoItem])\r\n         showAlert(true, 'success', 'Successfully Added')\r\n         setName('')\r\n      }\r\n   }\r\n\r\n   const showAlert = (show = false, type = '', message = '') => {\r\n      setAlert({ show: show, type, message })\r\n   }\r\n\r\n   const editTodo = (id) => {\r\n      const findTodoData = list.find((todoItem) => todoItem.id === id)\r\n\r\n      if (findTodoData) {\r\n         setOptions('single')\r\n         setEditing(true)\r\n         setEditID(id)\r\n         setName(findTodoData.name)\r\n      }\r\n   }\r\n\r\n   const removeItem = (id, name) => {\r\n      setList(list.filter(item => item.id !== id))\r\n      showAlert(true, 'danger', 'Successfully Deleted: \"' + name + '\"')\r\n   }\r\n\r\n   const removeAllTodos = () => {\r\n      if (window.confirm('Are you sure you want delete all Todo\\'s?')) {\r\n         setList([])\r\n         showAlert(true, 'danger', 'Successfully deleted all Todo\\'s')\r\n      }\r\n   }\r\n\r\n   const removeAllCompleted = () => {\r\n      if (window.confirm('Are you sure you want delete all completed Todo\\'s')) {\r\n         setList(list.filter(todo => todo.checked !== true))\r\n         showAlert(true, 'danger', 'Successfully deleted all completed Todo\\'s')\r\n      }\r\n   }\r\n\r\n   const checkedItem = (id) => {\r\n      setList(list.map((todoItem) => {\r\n         if (todoItem.id === id) {\r\n            return { ...todoItem, checked: !todoItem.checked }\r\n         }\r\n         return todoItem;\r\n      }))\r\n   }\r\n\r\n   const optionHandle = () => {\r\n      setOptions((options === 'single' ? 'multiple' : 'single'))\r\n      setEditing(false)\r\n      setEditID(null)\r\n      setName('')\r\n   }\r\n\r\n   useEffect(() => {\r\n      localStorage.setItem('todolist', JSON.stringify(list))\r\n   }, [list])\r\n\r\n   useEffect(() => {\r\n      if (editing) {\r\n         inputRef.current.focus();\r\n      }\r\n   })\r\n\r\n   const handleSubmitMultiple = (e) => {\r\n      if (!textAreaData.current.value) {\r\n         showAlert(true, 'danger', 'Please Enter Value')\r\n      } else if (window.confirm('Are you sure you have already reviewed the list?')) {\r\n         const multipleTodos = textAreaData.current.value.split('\\n').map((todoItem, i) => {\r\n            const myReturnData = {\r\n               id: uuid().replace(/-/g, ''),\r\n               name: todoItem,\r\n               checked: false\r\n            }\r\n            return myReturnData\r\n         })\r\n\r\n         setList([...list].concat(multipleTodos))\r\n         showAlert(true, 'success', 'Successfully Added')\r\n         setMultipleTodo('');\r\n         setName('')\r\n      }\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <section className=\"section-center\">\r\n            {alert.show && <Alert {...alert} removeAlert={showAlert} list={list} />}\r\n\r\n            <h4>Todo List</h4>\r\n\r\n            <div className=\"form-control\">\r\n               <select\r\n                  id=\"selectOpt\"\r\n                  className=\"grocery\"\r\n                  value={options} onChange={optionHandle}>\r\n                  <option value=\"single\">Single todo</option>\r\n                  <option value=\"multiple\">Multiple Todo</option>\r\n               </select>\r\n            </div>\r\n\r\n            <div className=\"divider\"></div>\r\n\r\n            {options === 'multiple' ? (\r\n               <div className=\"form-control\">\r\n                  <textarea\r\n                     className='grocery textarea'\r\n                     cols=\"30\"\r\n                     rows=\"10\"\r\n                     placeholder=\"Add multiple lines...\"\r\n                     value={multipleTodo}\r\n                     ref={textAreaData}\r\n                     onChange={(e) => setMultipleTodo(e.target.value)}\r\n                  />\r\n                  <button type=\"button\" className=\"submit-btn\" onClick={handleSubmitMultiple}>Add Multiple</button>\r\n               </div>\r\n            ) : (\r\n                  <form className=\"grocery-form\" onSubmit={handleSubmit}>\r\n                     <div className=\"form-control\">\r\n                        <input type=\"text\" className=\"grocery\" ref={inputRef} placeholder=\"Add todo...\" value={name} onChange={(e) => setName(e.target.value)} />\r\n                        <button type=\"submit\" className=\"submit-btn\">{editing ? 'Save Changes' : 'Add'}</button>\r\n                     </div>\r\n                  </form>\r\n               )}\r\n\r\n         </section>\r\n         {list.length > 0 && (\r\n            <section className=\"section-center\" style={{ marginTop: '1rem' }}>\r\n               <h4>My Todo</h4>\r\n\r\n               <div className=\"divider\"></div>\r\n\r\n               <div className=\"grocery-container\">\r\n                  <div className=\"grocery-list\">\r\n                     <TodoItem list={list} removeItem={removeItem} editTodo={editTodo} checkedItem={checkedItem} />\r\n                  </div>\r\n\r\n                  <div className=\"divider\"></div>\r\n\r\n                  <div className=\"form-control\">\r\n                     <button className=\"clear-btn\" onClick={removeAllCompleted}>Remove Completed</button>\r\n                     <button className=\"clear-btn\" onClick={removeAllTodos}>Clear List</button>\r\n                  </div>\r\n\r\n               </div>\r\n\r\n            </section>\r\n         )}\r\n      </>\r\n   )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}